---
const skills = {
  frontend: [
    { name: 'React', suit: '♠️', level: 'Ace', description: 'Expert level React development with hooks and context' },
    { name: 'Next.js', suit: '♠️', level: 'King', description: 'Server-side rendering and static site generation' },
    { name: 'TypeScript', suit: '♠️', level: 'Queen', description: 'Strong typing and advanced type features' },
    { name: 'Tailwind CSS', suit: '♠️', level: 'Jack', description: 'Utility-first CSS framework mastery' },
  ],
  backend: [
    { name: 'Node.js', suit: '♥️', level: 'Ace', description: 'High-performance server applications' },
    { name: 'Python', suit: '♥️', level: 'King', description: 'Data processing and API development' },
    { name: 'GraphQL', suit: '♥️', level: 'Queen', description: 'Flexible API querying and schema design' },
    { name: 'REST APIs', suit: '♥️', level: 'Jack', description: 'RESTful architecture and best practices' },
  ],
  database: [
    { name: 'PostgreSQL', suit: '♦️', level: 'Ace', description: 'Complex queries and data modeling' },
    { name: 'MongoDB', suit: '♦️', level: 'King', description: 'NoSQL database design and optimization' },
    { name: 'Redis', suit: '♦️', level: 'Queen', description: 'Caching and real-time features' },
  ],
  tools: [
    { name: 'Docker', suit: '♣️', level: 'Ace', description: 'Containerization and deployment' },
    { name: 'AWS', suit: '♣️', level: 'King', description: 'Cloud infrastructure and services' },
    { name: 'Git', suit: '♣️', level: 'Queen', description: 'Version control and collaboration' },
    { name: 'CI/CD', suit: '♣️', level: 'Jack', description: 'Automated testing and deployment' },
  ],
};
---

<section id="skills" class="py-section bg-gradient-to-b from-slate-950 to-blue-950">
  <div class="max-w-content mx-auto px-4">
    <h2 class="text-4xl font-bold text-electric-blue text-center mb-16">My Tech Stack</h2>
    
    <!-- Royal Flush Section -->
    <div class="mb-20">
      <h3 class="text-2xl font-semibold text-off-white text-center mb-8">Royal Flush</h3>
      <div class="flex justify-center gap-4 flex-wrap">
        {Object.values(skills).flat().slice(0, 5).map((skill) => (
          <div class="card-flip w-48 h-64">
            <div class="card-inner">
              <!-- Front of Card -->
              <div class="card-front bg-rich-blue rounded-xl border-2 border-electric-blue p-6 flex flex-col justify-between">
                <div class="text-4xl">{skill.suit}</div>
                <div class="text-center">
                  <h4 class="text-xl font-bold text-off-white">{skill.name}</h4>
                  <p class="text-electric-blue">{skill.level}</p>
                </div>
              </div>
              <!-- Back of Card -->
              <div class="card-back bg-rich-blue rounded-xl border-2 border-electric-blue p-6 flex items-center justify-center">
                <p class="text-light-gray text-center">{skill.description}</p>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Skill Categories -->
    <div class="grid md:grid-cols-2 gap-12">
      {Object.entries(skills).map(([category, categorySkills]) => (
        <div class="space-y-6">
          <h3 class="text-2xl font-semibold text-electric-blue flex items-center gap-2">
            <span>{categorySkills[0].suit}</span>
            {category.charAt(0).toUpperCase() + category.slice(1)}
          </h3>
          <div class="grid grid-cols-2 gap-4">
            {categorySkills.map((skill) => (
              <div class="bg-rich-blue rounded-lg p-4 backdrop-blur-sm border border-electric-blue/20 hover:border-electric-blue transition-colors">
                <div class="flex items-center justify-between mb-2">
                  <h4 class="font-medium text-off-white">{skill.name}</h4>
                  <span class="text-electric-blue">{skill.level}</span>
                </div>
                <p class="text-sm text-muted">{skill.description}</p>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .perspective-1000 {
    perspective: 1000px;
  }

  .card-flip {
    perspective: 1000px;
  }
  .card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    transition: transform 0.6s cubic-bezier(0.4,0,0.2,1);
    transform-style: preserve-3d;
  }
  .card-flip:hover .card-inner,
  .card-flip:focus-within .card-inner {
    transform: rotateY(180deg);
  }
  .card-front, .card-back {
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }
  .card-back {
    transform: rotateY(180deg);
  }
  .rotate-y-180 {
    transform: rotateY(180deg);
  }
</style> 